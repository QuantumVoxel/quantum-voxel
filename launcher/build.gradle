//file:noinspection GroovyUnusedCatchParameter


//import dev.ultreon.gameutils.GameUtilsPlugin
//import dev.ultreon.gameutils.ProjectType

import org.panteleyev.jpackage.ImageType

import java.nio.file.Files
import java.nio.file.Paths
import io.github.fourlastor.construo.Target

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath "io.github.fourlastor:construo:1.5.1"
        classpath group: 'commons-io', name: 'commons-io', version: '2.11.0'
        classpath "com.google.code.gson:gson:2.10.1"
        classpath "org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:1.9.22"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id "org.panteleyev.jpackageplugin" version "1.5.0"
    id 'org.graalvm.buildtools.native' version '0.10.3'
}

apply plugin: 'io.github.fourlastor.construo'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.jetbrains.kotlin.jvm'

//****************************//
// Setting up main properties //
//****************************//

group projectGroup // https://maven.apache.org/guides/mini/guide-naming-conventions.html

group = projectGroup
def packageVersion = rootProject.version

base {
    archivesBaseName = "quantum-launcher-$mavenVersion"
}

java {
    withSourcesJar()
    withJavadocJar()
}

graalvmNative {
    binaries {
        main {
            imageName = "QuantumVoxel"
            mainClass = "dev.ultreon.quantum.launcher.Launcher"
            buildArgs.add("-O4")
            quickBuild = true
            sharedLibrary = false
        }
    }

    toolchainDetection = true
}

configurations {
    addToJar {
        canBeResolved true
    }

    natives_win {
        canBeConsumed = true
        canBeResolved = true
    }

    natives_mac {
        canBeConsumed = true
        canBeResolved = true
    }

    natives_linux {

    }
}

evaluationDependsOn(":client")

dependencies {
    addToJar runtimeOnly(project(":gameprovider"))
    runtimeOnly(project(":client"))
    runtimeOnly(project(":desktop"))
    runtimeOnly(project(":mixinprovider"))

    runtimeOnly("com.formdev:flatlaf:3.2.1")

    runtimeOnly("com.badlogicgames.gdx:gdx:$gdxVersion")
    runtimeOnly("com.badlogicgames.gdx:gdx-box2d:$gdxVersion")
    runtimeOnly("com.badlogicgames.ashley:ashley:$ashleyVersion")
    runtimeOnly("com.badlogicgames.gdx:gdx-ai:$aiVersion")
    runtimeOnly("com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion")
    runtimeOnly("com.badlogicgames.gdx:gdx-freetype:$gdxVersion")
    runtimeOnly("com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion")

    runtimeOnly("com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion")
    runtimeOnly("com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop")
    runtimeOnly("com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop")
    runtimeOnly("com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-desktop")
    runtimeOnly("com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion")
    runtimeOnly("com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop")
    runtimeOnly("org.tukaani:xz:$tukaaniXzVersion")
    runtimeOnly("org.bidib.org.oxbow:swingbits:$swingbitsVersion")

    // Apache Log4J
    runtimeOnly("org.apache.logging.log4j:log4j:$log4jVersion")
    runtimeOnly("org.apache.logging.log4j:log4j-core:$log4jVersion")
    runtimeOnly("org.apache.logging.log4j:log4j-api:$log4jVersion")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion")

    // JNA
    runtimeOnly("net.java.dev.jna:jna:$jnaVersion")
    runtimeOnly("net.java.dev.jna:jna-platform:$jnaVersion")

    // SLF4J
    runtimeOnly("org.slf4j:slf4j-api:$slf4jVersion")

    // Google
    runtimeOnly("com.google.code.gson:gson:2.10.1")
    runtimeOnly("com.google.guava:guava:$guavaVersion")

    // Misc
    runtimeOnly("it.unimi.dsi:fastutil:8.5.12", { exclude group: "it.unimi.dsi", module: "fastutil-core" })
    runtimeOnly('com.raylabz:opensimplex:1.0.3')

    runtimeOnly("space.earlygrey:shapedrawer:$shapeDrawerVersion")

    runtimeOnly("it.unimi.dsi:fastutil-core:8.5.9")
    runtimeOnly("com.google.code.findbugs:jsr305:$jsrVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    runtimeOnly("org.xbib.elasticsearch:joptsimple:6.3.2.1")
    runtimeOnly("org.apache.logging.log4j:log4j:$log4jVersion")
    runtimeOnly("org.apache.logging.log4j:log4j-core:$log4jVersion")
    runtimeOnly("org.apache.logging.log4j:log4j-api:$log4jVersion")

    // fabric-loader dependencies
    runtimeOnly("org.ow2.asm:asm:${project.asmVersion}")
    runtimeOnly("org.ow2.asm:asm-analysis:${project.asmVersion}")
    runtimeOnly("org.ow2.asm:asm-commons:${project.asmVersion}")
    runtimeOnly("org.ow2.asm:asm-tree:${project.asmVersion}")
    runtimeOnly("org.ow2.asm:asm-util:${project.asmVersion}")

    runtimeOnly("net.fabricmc:sponge-mixin:${project.mixinVersion}") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    //noinspection GradleDynamicVersion
    runtimeOnly('net.fabricmc:tiny-mappings-parser:0.3.0+build.17')
    runtimeOnly('net.fabricmc:tiny-remapper:0.8.7')
    //noinspection GradleDynamicVersion
    runtimeOnly('net.fabricmc:dev-launch-injector:0.2.1+build.8')
    runtimeOnly('net.fabricmc:access-widener:2.1.0')

    runtimeOnly("net.fabricmc:fabric-loader:$fabricVersion")
    
    natives_win runtimeOnly("org.lwjgl:lwjgl:3.3.3:natives-windows")
    natives_win runtimeOnly("org.lwjgl:lwjgl:3.3.3:natives-windows-arm64")
    natives_linux runtimeOnly("org.lwjgl:lwjgl:3.3.3:natives-linux")
    natives_linux runtimeOnly("org.lwjgl:lwjgl:3.3.3:natives-linux-arm32")
    natives_linux runtimeOnly("org.lwjgl:lwjgl:3.3.3:natives-linux-arm64")
    natives_mac runtimeOnly("org.lwjgl:lwjgl:3.3.3:natives-macos")
    natives_mac runtimeOnly("org.lwjgl:lwjgl:3.3.3:natives-macos-arm64")
    
    natives_win runtimeOnly("org.lwjgl:lwjgl-glfw:3.3.3:natives-windows")
    natives_win runtimeOnly("org.lwjgl:lwjgl-glfw:3.3.3:natives-windows-arm64")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-glfw:3.3.3:natives-linux")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-glfw:3.3.3:natives-linux-arm32")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-glfw:3.3.3:natives-linux-arm64")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-glfw:3.3.3:natives-macos")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-glfw:3.3.3:natives-macos-arm64")
    
    natives_win runtimeOnly("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-windows")
    natives_win runtimeOnly("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-windows-arm64")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-linux")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-linux-arm32")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-linux-arm64")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-macos")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-macos-arm64")
    
    natives_win runtimeOnly("org.lwjgl:lwjgl-openal:3.3.3:natives-windows")
    natives_win runtimeOnly("org.lwjgl:lwjgl-openal:3.3.3:natives-windows-arm64")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-openal:3.3.3:natives-linux")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-openal:3.3.3:natives-linux-arm32")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-openal:3.3.3:natives-linux-arm64")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-openal:3.3.3:natives-macos")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-openal:3.3.3:natives-macos-arm64")
    
    natives_win runtimeOnly("org.lwjgl:lwjgl-opengl:3.3.3:natives-windows")
    natives_win runtimeOnly("org.lwjgl:lwjgl-opengl:3.3.3:natives-windows-arm64")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-opengl:3.3.3:natives-linux")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-opengl:3.3.3:natives-linux-arm32")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-opengl:3.3.3:natives-linux-arm64")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-opengl:3.3.3:natives-macos")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-opengl:3.3.3:natives-macos-arm64")
    
    natives_win runtimeOnly("org.lwjgl:lwjgl-stb:3.3.3:natives-windows")
    natives_win runtimeOnly("org.lwjgl:lwjgl-stb:3.3.3:natives-windows-arm64")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-stb:3.3.3:natives-linux")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-stb:3.3.3:natives-linux-arm32")
    natives_linux runtimeOnly("org.lwjgl:lwjgl-stb:3.3.3:natives-linux-arm64")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-stb:3.3.3:natives-macos")
    natives_mac runtimeOnly("org.lwjgl:lwjgl-stb:3.3.3:natives-macos-arm64")
}

processResources {
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }
    exclude "*.pdn", "*.xcf", "*.ps"

    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

jar {
    dependsOn ":gameprovider:build"
    dependsOn ":desktop:build"
    dependsOn ":client:build"
    dependsOn ":mixinprovider:build"

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Quantum Voxel',
                'Implementation-Vendor': 'Ultreon Studios',
                project_version: project.mavenVersion,
                'Main-Class': 'dev.ultreon.quantum.launcher.Launcher'
    }

    exclude "*.RSA", "*.SF", "*.MF"

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    doLast {
        println "DESK_MERGE FILE: ${file("$projectDir/build/libs/").list().toArrayString()}"
        println "CORE FILE: ${file("${project(":client")buildDir}/libs/").list().toArrayString()}"
        println "DESKTOP FILE: ${file("${project(":desktop")buildDir}/libs/").list().toArrayString()}"
        println "GAMEPROVIDER FILE: ${file("${project(":gameprovider")buildDir}/libs/").list().toArrayString()}"
    }

    archiveBaseName = base.archivesName
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

build {
    dependsOn ":gameprovider:build", ":desktop:build", ":server:build", ":dedicated:build", ":dedicated:build", ":client:build"
}

construo {
    // name of the executable
    name.set("Quantum Voxel")
    // human-readable name, used for example in the `.app` name for macOS
    humanName.set("Quantum Voxel")
    // Optional, defaults to project version property
    version.set("$projectVersion")

    jdkRoot.dir(javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(21))
    }.get().getMetadata().installationPath.asFile.absolutePath)

    roast {
        it.useZgc.set true
    }

    targets.configure {
        create("linuxX64", Target.Linux) {
            architecture.set(Target.Architecture.X86_64)
            jdkUrl.set("https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-21.0.2/graalvm-community-jdk-21.0.2_linux-x64_bin.tar.gz")
        }
        create("macM1", Target.MacOs) {
            architecture.set(Target.Architecture.AARCH64)
            jdkUrl.set("https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-21.0.2/graalvm-community-jdk-21.0.2_macos-aarch64_bin.tar.gz")
            // macOS needs an identifier
            identifier.set("dev.ultreon.quantum." + appName)
            // Optional: icon for macOS
            macIcon.set(project.file("icons/icon.icns"))
        }
        create("macX64", Target.MacOs) {
            architecture.set(Target.Architecture.X86_64)
            jdkUrl.set("https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-21.0.2/graalvm-community-jdk-21.0.2_macos-x64_bin.tar.gz")
            // macOS needs an identifier
            identifier.set("dev.ultreon.quantum." + appName)
            // Optional: icon for macOS
            macIcon.set(project.file("icons/icon.icns"))
        }
        create("winX64", Target.Windows) {
            architecture.set(Target.Architecture.X86_64)
            jdkUrl.set("https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-21.0.2/graalvm-community-jdk-21.0.2_windows-x64_bin.zip")
            useGpuHint.set(true)
            // Uncomment the next line to show a console when the game runs, to print messages.
            //useConsole.set(true)
        }
    }
}

tasks.register("packageAll") {
    dependsOn("packageLinuxX64", "packageMacM1", "packageMacX64", "packageWinX64")
}

["LinuxX64", "MacM1", "MacX64", "WinX64"].forEach { str ->
    tasks.register("copyDeps$str", Copy) {
        dependsOn "roast$str"
        from configurations.runtimeClasspath
        exclude "lwjgl-2.9.3.jar"
        exclude "lwjgl-platform-2.9.3.jar"
        exclude "lwjgl-platform-2.9.3-*.jar"
        into "$projectDir/build/construo/${str[0].toLowerCase()}${str[1..-1]}/roast/app"

        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            from configurations.natives_win
        }

        if (System.getProperty("os.name").toLowerCase().contains("linux")) {
            from configurations.natives_linux
        }

        if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            from configurations.natives_mac
        }
    }

    tasks.named("roast$str").configure {
        it.finalizedBy("copyDeps$str")
    }
    tasks.named("package$str").configure {
        it.mustRunAfter("copyDeps$str")
    }
    if (str.startsWith("Mac")) {
        tasks.named("buildMacAppBundle$str").configure {
            it.mustRunAfter("copyDeps$str")
        }
        tasks.named("generatePList$str").configure {
            it.mustRunAfter("copyDeps$str")
        }
    }
    tasks.register("copyJdkBin$str", Copy) {
        dependsOn "roast$str"

        def path = Paths.get("$projectDir/build/construo/jdk/${str[0].toLowerCase()}${str[1..-1]}/graalvm-community-openjdk-21.0.2+13.1")
        if (str.startsWith("Mac")) {
            path = path.resolve("Contents/Home")
        }
        from files(path.toFile())
        into "$projectDir/build/construo/${str[0].toLowerCase()}${str[1..-1]}/roast/jdk"
    }

    tasks.named("roast$str").configure {
        it.finalizedBy("copyJdkBin$str")
    }
    tasks.named("package$str").configure {
        it.mustRunAfter("copyJdkBin$str")
    }
    if (str.startsWith("Mac")) {
        tasks.named("buildMacAppBundle$str").configure {
            it.mustRunAfter("copyJdkBin$str")
        }
        tasks.named("generatePList$str").configure {
            it.mustRunAfter("copyJdkBin$str")
        }
    }
}
