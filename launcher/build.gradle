//file:noinspection GroovyUnusedCatchParameter


//import dev.ultreon.gameutils.GameUtilsPlugin
//import dev.ultreon.gameutils.ProjectType

import org.panteleyev.jpackage.ImageType

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.11.0'
        classpath "com.google.code.gson:gson:2.10.1"
        classpath "org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:1.9.22"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id "org.panteleyev.jpackageplugin" version "1.5.0"
    id 'org.graalvm.buildtools.native' version '0.10.3'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.jetbrains.kotlin.jvm'

//****************************//
// Setting up main properties //
//****************************//

group projectGroup // https://maven.apache.org/guides/mini/guide-naming-conventions.html

group = projectGroup
def packageVersion = rootProject.version

base {
    archivesName = archivesBaseName + "-launcher"
}

java {
    withSourcesJar()
    withJavadocJar()
}

graalvmNative {
    binaries {
        main {
            imageName = "QuantumVoxel"
            mainClass = "dev.ultreon.quantum.launcher.Launcher"
            buildArgs.add("-O4")
            quickBuild = true
            sharedLibrary = false
        }
    }

    toolchainDetection = true
}

repositories {
    maven {
        url = "https://maven.fabricmc.net"
        name = "FabricMC"
    }
}

configurations {
    addToJar {
        canBeResolved true
    }

    natives_win {
        canBeConsumed = true
        canBeResolved = true
    }

    natives_mac {
        canBeConsumed = true
        canBeResolved = true
    }

    natives_linux {

    }
}

evaluationDependsOn(":client")

dependencies {
    addToJar api(project(":gameprovider"))
    api(project(":client"))
    api(project(":desktop"))
    api(project(":mixinprovider"))

    api("com.formdev:flatlaf:3.2.1")

    api("com.badlogicgames.gdx:gdx:$gdxVersion")
    api("com.badlogicgames.gdx:gdx-box2d:$gdxVersion")
    api("com.badlogicgames.ashley:ashley:$ashleyVersion")
    api("com.badlogicgames.gdx:gdx-ai:$aiVersion")
    api("com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion")
    api("com.badlogicgames.gdx:gdx-freetype:$gdxVersion")
    api("com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion")

    api("com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion")
    api("com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop")
    api("com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop")
    api("com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-desktop")
    api("com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion")
    api("com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop")
    api("org.tukaani:xz:$tukaaniXzVersion")
    api("org.bidib.org.oxbow:swingbits:$swingbitsVersion")

    // Apache Log4J
    api("org.apache.logging.log4j:log4j:$log4jVersion")
    api("org.apache.logging.log4j:log4j-core:$log4jVersion")
    api("org.apache.logging.log4j:log4j-api:$log4jVersion")
    api("org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion")

    // JNA
    api("net.java.dev.jna:jna:$jnaVersion")
    api("net.java.dev.jna:jna-platform:$jnaVersion")

    // SLF4J
    api("org.slf4j:slf4j-api:$slf4jVersion")

    // Google
    api("com.google.code.gson:gson:2.10.1")
    api("com.google.guava:guava:$guavaVersion")

    // Misc
    api("it.unimi.dsi:fastutil:8.5.12", { exclude group: "it.unimi.dsi", module: "fastutil-core" })
    api('com.raylabz:opensimplex:1.0.3')

    api("space.earlygrey:shapedrawer:$shapeDrawerVersion")

    // ImGui
    api("io.github.spair:imgui-java-binding:$imGuiVersion")
    api("io.github.spair:imgui-java-lwjgl3:$imGuiVersion")
    api("io.github.spair:imgui-java-natives-linux:$imGuiVersion")
    api("io.github.spair:imgui-java-natives-macos:$imGuiVersion")
    api("io.github.spair:imgui-java-natives-windows:$imGuiVersion")

    api("it.unimi.dsi:fastutil-core:8.5.9")
    api("com.google.code.findbugs:jsr305:$jsrVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    api("org.xbib.elasticsearch:joptsimple:6.3.2.1")
    api("org.apache.logging.log4j:log4j:$log4jVersion")
    api("org.apache.logging.log4j:log4j-core:$log4jVersion")
    api("org.apache.logging.log4j:log4j-api:$log4jVersion")

    // fabric-loader dependencies
    api("org.ow2.asm:asm:${project.asmVersion}")
    api("org.ow2.asm:asm-analysis:${project.asmVersion}")
    api("org.ow2.asm:asm-commons:${project.asmVersion}")
    api("org.ow2.asm:asm-tree:${project.asmVersion}")
    api("org.ow2.asm:asm-util:${project.asmVersion}")

    api("net.fabricmc:sponge-mixin:${project.mixinVersion}") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    //noinspection GradleDynamicVersion
    api('net.fabricmc:tiny-mappings-parser:0.3.0+build.17')
    api('net.fabricmc:tiny-remapper:0.8.7')
    //noinspection GradleDynamicVersion
    api('net.fabricmc:dev-launch-injector:0.2.1+build.8')
    api('net.fabricmc:access-widener:2.1.0')

    api("dev.ultreon.quantum-fabric-loader:fabric-loader:$fabricVersion")
    
    natives_win api("org.lwjgl:lwjgl:3.3.3:natives-windows")
    natives_win api("org.lwjgl:lwjgl:3.3.3:natives-windows-arm64")
    natives_linux api("org.lwjgl:lwjgl:3.3.3:natives-linux")
    natives_linux api("org.lwjgl:lwjgl:3.3.3:natives-linux-arm32")
    natives_linux api("org.lwjgl:lwjgl:3.3.3:natives-linux-arm64")
    natives_mac api("org.lwjgl:lwjgl:3.3.3:natives-macos")
    natives_mac api("org.lwjgl:lwjgl:3.3.3:natives-macos-arm64")
    
    natives_win api("org.lwjgl:lwjgl-glfw:3.3.3:natives-windows")
    natives_win api("org.lwjgl:lwjgl-glfw:3.3.3:natives-windows-arm64")
    natives_linux api("org.lwjgl:lwjgl-glfw:3.3.3:natives-linux")
    natives_linux api("org.lwjgl:lwjgl-glfw:3.3.3:natives-linux-arm32")
    natives_linux api("org.lwjgl:lwjgl-glfw:3.3.3:natives-linux-arm64")
    natives_mac api("org.lwjgl:lwjgl-glfw:3.3.3:natives-macos")
    natives_mac api("org.lwjgl:lwjgl-glfw:3.3.3:natives-macos-arm64")
    
    natives_win api("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-windows")
    natives_win api("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-windows-arm64")
    natives_linux api("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-linux")
    natives_linux api("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-linux-arm32")
    natives_linux api("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-linux-arm64")
    natives_mac api("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-macos")
    natives_mac api("org.lwjgl:lwjgl-jemalloc:3.3.3:natives-macos-arm64")
    
    natives_win api("org.lwjgl:lwjgl-openal:3.3.3:natives-windows")
    natives_win api("org.lwjgl:lwjgl-openal:3.3.3:natives-windows-arm64")
    natives_linux api("org.lwjgl:lwjgl-openal:3.3.3:natives-linux")
    natives_linux api("org.lwjgl:lwjgl-openal:3.3.3:natives-linux-arm32")
    natives_linux api("org.lwjgl:lwjgl-openal:3.3.3:natives-linux-arm64")
    natives_mac api("org.lwjgl:lwjgl-openal:3.3.3:natives-macos")
    natives_mac api("org.lwjgl:lwjgl-openal:3.3.3:natives-macos-arm64")
    
    natives_win api("org.lwjgl:lwjgl-opengl:3.3.3:natives-windows")
    natives_win api("org.lwjgl:lwjgl-opengl:3.3.3:natives-windows-arm64")
    natives_linux api("org.lwjgl:lwjgl-opengl:3.3.3:natives-linux")
    natives_linux api("org.lwjgl:lwjgl-opengl:3.3.3:natives-linux-arm32")
    natives_linux api("org.lwjgl:lwjgl-opengl:3.3.3:natives-linux-arm64")
    natives_mac api("org.lwjgl:lwjgl-opengl:3.3.3:natives-macos")
    natives_mac api("org.lwjgl:lwjgl-opengl:3.3.3:natives-macos-arm64")
    
    natives_win api("org.lwjgl:lwjgl-stb:3.3.3:natives-windows")
    natives_win api("org.lwjgl:lwjgl-stb:3.3.3:natives-windows-arm64")
    natives_linux api("org.lwjgl:lwjgl-stb:3.3.3:natives-linux")
    natives_linux api("org.lwjgl:lwjgl-stb:3.3.3:natives-linux-arm32")
    natives_linux api("org.lwjgl:lwjgl-stb:3.3.3:natives-linux-arm64")
    natives_mac api("org.lwjgl:lwjgl-stb:3.3.3:natives-macos")
    natives_mac api("org.lwjgl:lwjgl-stb:3.3.3:natives-macos-arm64")
}

processResources {
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }
    exclude "*.pdn", "*.xcf", "*.ps"

    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

jar {
    dependsOn ":gameprovider:build"
    dependsOn ":desktop:build"
    dependsOn ":client:build"
    dependsOn ":mixinprovider:build"

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Quantum Voxel',
                'Implementation-Vendor': 'Ultreon Studios',
                project_version: project.projectVersion,
                'Main-Class': 'dev.ultreon.quantum.DesktopLauncher',
                'Multi-Release': 'true'
    }

    exclude "*.RSA", "*.SF", "*.MF"

    from(project(":mixinprovider").tasks.jar.outputs) {
        into("")
        rename {
            "mixinprovider.jar"
        }

        duplicatesStrategy DuplicatesStrategy.FAIL
    }

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    doLast {
        println "DESK_MERGE FILE: ${file("$projectDir/build/libs/").list().toArrayString()}"
        println "CORE FILE: ${file("${project(":client")buildDir}/libs/").list().toArrayString()}"
        println "DESKTOP FILE: ${file("${project(":desktop")buildDir}/libs/").list().toArrayString()}"
        println "GAMEPROVIDER FILE: ${file("${project(":gameprovider")buildDir}/libs/").list().toArrayString()}"
    }

    archiveBaseName = base.archivesName
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

delete "$projectDir/build/jars"

tasks.register('copyDependencies', Copy) {
    from(configurations.runtimeClasspath)
    exclude "lwjgl-2.9.3.jar"
    exclude "lwjgl-platform-2.9.3.jar"
    exclude "lwjgl-platform-2.9.3-*.jar"
    into("$projectDir/build/jars")
}

tasks.register('copyJar', Copy) {
    from(tasks.jar)
    into("$projectDir/build/jars")
    doLast {
        delete fileTree("$project/build/dist")
        delete file("$project/build/dist")
    }
}

tasks.register('package', Zip) {
    dependsOn("build", ":gameprovider:build", ":desktop:build", ":client:build", "copyDependencies", "copyJar")

    from fileTree(dir: "$projectDir/build/jars", include: "*.jar")
    archiveFileName = 'package.zip'
    destinationDirectory = file("$rootProject/build/dist/")
}

tasks.register('packageBin', Zip) {
    from fileTree(dir: "$projectDir/build/dist/")
    archiveFileName = 'package.zip'

    doLast {
        copy {
            from "${outputs.files.singleFile.path}"
            into "$rootProject.projectDir/build/dist"
            rename "package.zip", "${appName}-${projectVersion}.zip"
        }
    }
}

jpackage {
    dependsOn("build", ":gameprovider:build", ":desktop:build", ":client:build", "copyDependencies", "copyJar")
    finalizedBy("packageBin")

    input  = "$projectDir/build/jars"
    destination = "$projectDir/build/dist"

    appName = appName
    appVersion = projectVersion
    vendor = "Ultreon Studios"
    copyright = "Copyright (c) 2023 Ultreon Studios"
    runtimeImage = System.getProperty("java.home")

    mainJar = jar.archiveFileName.get()
    mainClass = "dev.ultreon.quantum.launcher.Launcher"


    javaOptions = [ "-Xmx8g", "-Dfile.encoding=UTF-8", "-Dquantum.environment=packaged","-Dfabric.skipMcProvider=true" ]
    arguments = [ "--packaged" ]

    mac {
        javaOptions = javaOptions
        icon = "$rootProject.projectDir/icons/icon.icns"
        javaOptions += ["-XstartOnFirstThread"]
        macPackageIdentifier = projectId
        macPackageName = projectName
        appVersion = "1.0.0"
        type = ImageType.APP_IMAGE
    }

    linux {
        icon = "$rootProject.projectDir/icons/icon.png"
        appVersion = project.version.toString()
        aboutUrl = null
        licenseFile = null
        type = ImageType.APP_IMAGE
    }

    windows {
        winConsole = false

        type ImageType.APP_IMAGE

        doLast {
            copy {
                from configurations.natives_win.collect {  it.isDirectory() ? it : zipTree(it) }
                into "$projectDir/build/dist/$jpackage.appName/natives"
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }
    }
}
