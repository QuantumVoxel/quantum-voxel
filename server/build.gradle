//file:noinspection GroovyUnusedCatchParameter
//file:noinspection GroovyAssignabilityCheck


import org.intellij.lang.annotations.Language

import java.nio.file.Files
import java.nio.file.Paths

import static org.gradle.api.file.DuplicatesStrategy.EXCLUDE
import static org.gradle.api.file.DuplicatesStrategy.INCLUDE

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.13.0'
        classpath "com.google.code.gson:gson:2.10.1"
        classpath "org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:1.9.22"
    }
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'groovy'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

@Language("jvm-class-name")
def mainClass = 'net.fabricmc.loader.impl.launch.knot.KnotServer'

group project_group // https://maven.apache.org/guides/mini/guide-naming-conventions.html

java {
    withSourcesJar()
    withJavadocJar()
    
    sourceCompatibility("21")
    targetCompatibility("21")
}

dependencies {
    implementation api("com.formdev:flatlaf:3.2.1")
    implementation api("org.jetbrains:annotations:24.0.0")

    annotationProcessor "com.google.errorprone:error_prone_annotations:2.18.0"

    runtimeOnly "com.badlogicgames.gdx:gdx-tools:$gdx_version"

    // Language adapters
    api 'org.apache.groovy:groovy:4.0.14'
    api "org.scala-lang:scala-library:$scala_version"
    api 'org.jetbrains.kotlin:kotlin-stdlib:1.9.22'

    // CoreLibs
    implementation api("dev.ultreon.corelibs:collections-v0:$corelibs_version")
    implementation api("dev.ultreon.corelibs:commons-v0:$corelibs_version")
    implementation api("dev.ultreon.corelibs:datetime-v0:$corelibs_version")
    implementation api("dev.ultreon.corelibs:functions-v0:$corelibs_version")
    implementation api("dev.ultreon:ubo:$ultreon_data_version")
    implementation api("io.projectreactor:reactor-core:$reactor_version")

    // Apache Log4J
    implementation api("org.apache.commons:commons-lang3:3.13.0")
    implementation api("org.apache.commons:commons-collections4:$commons_collections4_version")
    implementation api("org.tukaani:xz:$tukaani_xz_version")
    implementation api("org.bidib.org.oxbow:swingbits:$swingbits_version")
    implementation api("io.netty:netty-all:$netty_version")

    implementation api("com.badlogicgames.gdx:gdx-ai:$ai_version")
    runtimeOnly "com.badlogicgames.gdx:gdx-backend-headless:$gdx_version"

    // JNA
    implementation api("net.java.dev.jna:jna:$jna_version")
    implementation api("net.java.dev.jna:jna-platform:$jna_version")

    implementation api("org.tukaani:xz:$tukaani_xz_version")
    implementation api("com.jcraft:jzlib:1.1.3")

    // JSON5
    implementation api("dev.ultreon:json5-api:d0a559bc9b")

    // Google
    implementation api("com.google.code.gson:gson:2.10.1")
    implementation api("com.google.guava:guava:$guava_version")

    // Misc
    implementation api("it.unimi.dsi:fastutil:8.5.12", { exclude group: "it.unimi.dsi", module: "fastutil-core" })
    implementation api("com.raylabz:opensimplex:1.0.3")
    implementation api("dev.ultreon.JNoiseJDK11:jnoise-pipeline:f45d87516b")

    implementation api('dev.ultreon:libnoiseforjava:f77e0827da')
    implementation api('com.flowpowered:flow-noise:1.0.0')

    implementation api("space.earlygrey:shapedrawer:$shapedrawer_version")

    implementation api("com.google.code.findbugs:jsr305:$jsr_version")
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    implementation api("org.xbib.elasticsearch:joptsimple:6.3.2.1")

    implementation(api("org.graalvm.polyglot:polyglot:23.1.2"))
    implementation(api("org.graalvm.polyglot:python:23.1.2"))
    implementation(api("org.graalvm.polyglot:js:23.1.2"))
    implementation(api("org.graalvm.llvm:llvm-api:23.1.2"))

    api 'org.mozilla:rhino:1.7.15!!'
    api 'org.mozilla:rhino-engine:1.7.15!!'
}

processResources {
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }
    from(project(":api-javascript").tasks.getByName("dist").outputs)
    exclude "*.pdn", "*.xcf", "*.ps"

    inputs.property "version", version

    filesMatching("metadata.json") {
        expand(["version": version])
    }
    duplicatesStrategy INCLUDE
}

jar {
    dependsOn ":api-javascript:dist"

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Quantum Voxel',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: project.version,
                'Main-Class': mainClass,
                'Multi-Release': 'true'
    }

    from(compileJava.outputs)
    from(processResources.outputs)

    zip64 true
    duplicatesStrategy INCLUDE
}

//noinspection ConfigurationAvoidance
tasks.create("serverJar", Jar) {
    dependsOn jar

    archiveFileName = "server.jar"

    from compileJava.outputs
    from processResources.outputs

    duplicatesStrategy EXCLUDE

    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Quantum Voxel',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: project.version,
                'Main-Class': mainClass,
                'Multi-Release': 'true'
    }

    zip64 true
}

tasks.register('prepareRun', {
    Files.createDirectories(Paths.get(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy INCLUDE
}

tasks.register('copyDependencies', Copy) {
    from(configurations.runtimeClasspath)
    into("$projectDir/build/jars")
}

tasks.register('copyJar', Copy) {
    from(tasks.jar)
    into("$projectDir/build/jars")
}

compileJava {
    options.encoding = "UTF-8"
}

compileKotlin {
    kotlinOptions.jvmTarget = "21"
}
