//file:noinspection GroovyUnusedCatchParameter


//import dev.ultreon.gameutils.ProjectType

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.13.0'
        classpath "com.google.code.gson:gson:2.10.1"
        classpath "org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:1.9.22"

        // Shadow
        classpath "com.github.jengelman.gradle.plugins:shadow:+"
    }
}

//*****************//
//     Plugins     //
//*****************//
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.jetbrains.kotlin.jvm'

group projectGroup // https://maven.apache.org/guides/mini/guide-naming-conventions.html

java {
    withSourcesJar()
    withJavadocJar()
}

evaluationDependsOn(":gameprovider")
evaluationDependsOn(":server")

javadoc {
    dependsOn(":gameprovider:javadocJar")
    dependsOn(":gameprovider:sourcesJar")
}

configurations {
    shadow {
        transitive = false
        canBeResolved = true
    }
}

dependencies {
    api(project(":server"))

    // CoreLibs
    api("dev.ultreon.corelibs:collections-v0:$coreLibsVersion")
    api("dev.ultreon.corelibs:commons-v0:$coreLibsVersion")
    api("dev.ultreon.corelibs:crash-v0:$coreLibsVersion")
    api("dev.ultreon.corelibs:datetime-v0:$coreLibsVersion")
    api("dev.ultreon.corelibs:events-v1:$coreLibsVersion")
    api("dev.ultreon.corelibs:functions-v0:$coreLibsVersion")
    api("dev.ultreon.corelibs:registries-v0:$coreLibsVersion")
    api("dev.ultreon.corelibs:resources-v0:$coreLibsVersion")
    api("dev.ultreon.corelibs:text-v0:$coreLibsVersion")
    api("dev.ultreon.corelibs:translations-v1:$coreLibsVersion")
    api("dev.ultreon:ubo:$uboVersion")

    shadow(compileOnly("com.jagrosh:DiscordIPC:+"))

    // LibGDX
    api("com.badlogicgames.gdx:gdx:$gdxVersion")
    api("com.badlogicgames.gdx:gdx-box2d:$gdxVersion")
    api("com.badlogicgames.ashley:ashley:$ashleyVersion")
    api("com.badlogicgames.gdx:gdx-ai:$aiVersion")
    api("com.badlogicgames.gdx:gdx-freetype:$gdxVersion")
    api("com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion")
    api("com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion")
    api("com.badlogicgames.gdx-video:gdx-video:$gdxVideoVersion")

    api("com.github.tommyettinger:textratypist:1.1.0")

    api("com.kotcrab.vis:vis-ui:$visuiVersion")

    // GDX VFX
    api("com.crashinvaders.vfx:gdx-vfx-core:0.5.4")
    api("com.crashinvaders.vfx:gdx-vfx-effects:0.5.4")

    // GDX GLTF Models
    api("com.github.mgsx-dev.gdx-gltf:gltf:$gltfVersion")

    api("org.apache.commons:commons-lang3:3.15.0")
    api("org.apache.commons:commons-collections4:$commonsCollectionsVersion")
    api("org.tukaani:xz:$tukaaniXzVersion")
    api("com.jcraft:jzlib:1.1.3")
    api("com.github.crykn.guacamole:gdx:v0.3.5")

    // Misc. Libraries
    api('it.unimi.dsi:fastutil:8.5.12', { exclude group: "it.unimi.dsi", module: "fastutil-core" })
    api('com.raylabz:opensimplex:1.0.3')
    api('org.jetbrains:annotations:24.0.1')

    api("space.earlygrey:shapedrawer:$shapeDrawerVersion")

    api("org.tukaani:xz:$tukaaniXzVersion")
    api("org.bidib.org.oxbow:swingbits:$swingbitsVersion")

    // json.org API
    api('org.json:json:20231013')

    // OSHI
    api("com.github.oshi:oshi-core:6.6.1")

    api("io.github.libsdl4j:libsdl4j:$libsdl4jVersion")
}

processResources {
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }
    exclude "*.pdn", "*.xcf", "*.ps", "*.bbmodel"

    inputs.property "version", version

    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Quantum Voxel',
                'Implementation-Vendor': 'Ultreon Studios',
                project_version: project.version,
                'Main-Class': 'dev.ultreon.quantum.DesktopLauncher',
                'Multi-Release': 'true'
    }

    from {
        compileJava.outputs
    }

    from {
        configurations.shadow.files.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from {
        processResources.outputs
    }

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.register('prepareRun', {
    Files.createDirectories(Path.of(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.register('copyDependencies', Copy) {
    from(configurations.runtimeClasspath)
    into("$projectDir/build/jars")
}

tasks.register('copyJar', Copy) {
    from(tasks.jar)
    into("$projectDir/build/jars")
}

test {
    useJUnitPlatform()
}

compileJava {
    options.encoding = "UTF-8"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

sourcesJar.dependsOn(":generateAssetList")
