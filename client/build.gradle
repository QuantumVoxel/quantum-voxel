//file:noinspection GroovyUnusedCatchParameter


//import dev.ultreon.gameutils.ProjectType

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.13.0'
        classpath "com.google.code.gson:gson:2.10.1"
        classpath "org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:1.9.22"

        // Shadow
        classpath "com.github.jengelman.gradle.plugins:shadow:+"
    }
}

//*****************//
//     Plugins     //
//*****************//
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'groovy'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'maven-publish'

group project_group // https://maven.apache.org/guides/mini/guide-naming-conventions.html

java {
    withSourcesJar()
}

configurations {
    shadow {
        transitive = false
        canBeResolved = true
    }
}

dependencies {
    api(project(":server"))

    // CoreLibs
    api("dev.ultreon.corelibs:collections-v0:$corelibs_version")
    api("dev.ultreon.corelibs:commons-v0:$corelibs_version")
    api("dev.ultreon.corelibs:crash-v0:$corelibs_version")
    api("dev.ultreon.corelibs:datetime-v0:$corelibs_version")
    api("dev.ultreon.corelibs:events-v1:$corelibs_version")
    api("dev.ultreon.corelibs:functions-v0:$corelibs_version")
    api("dev.ultreon.corelibs:registries-v0:$corelibs_version")
    api("dev.ultreon.corelibs:resources-v0:$corelibs_version")
    api("dev.ultreon.corelibs:text-v0:$corelibs_version")
    api("dev.ultreon.corelibs:translations-v1:$corelibs_version")
    api("dev.ultreon:ubo:$ultreon_data_version")

    api("com.jagrosh:DiscordIPC:+")

    // LibGDX
    api("com.badlogicgames.gdx:gdx:$gdx_version")
    api("com.badlogicgames.gdx:gdx-box2d:$gdx_version")
    api("com.badlogicgames.ashley:ashley:$ashley_version")
    api("com.badlogicgames.gdx:gdx-ai:$ai_version")
    api("com.badlogicgames.gdx:gdx-freetype:$gdx_version")
    api("com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdx_controllers_version")
    api("com.badlogicgames.box2dlights:box2dlights:$box_2d_lights_version")
    api("com.badlogicgames.gdx-video:gdx-video:$gdxVideoVersion")

    api("com.kotcrab.vis:vis-ui:$visui_version")

    // GDX VFX
    api("com.crashinvaders.vfx:gdx-vfx-core:0.5.4")
    api("com.crashinvaders.vfx:gdx-vfx-effects:0.5.4")

    // GDX GLTF Models
    api("com.github.mgsx-dev.gdx-gltf:gltf:$gltf_version")

    api("org.apache.commons:commons-lang3:3.13.0")
    api("org.apache.commons:commons-collections4:$commons_collections4_version")
    api("org.tukaani:xz:$tukaani_xz_version")
    api("com.jcraft:jzlib:1.1.3")
    api("com.github.crykn.guacamole:gdx:v0.3.5")

    // Google
    api("com.google.code.gson:gson:2.10.1")
    api("com.google.guava:guava:$guava_version")

    // Misc. Libraries
    api('it.unimi.dsi:fastutil:8.5.12', { exclude group: "it.unimi.dsi", module: "fastutil-core" })
    api('com.raylabz:opensimplex:1.0.3')
    api('org.jetbrains:annotations:24.0.1')

    api("space.earlygrey:shapedrawer:$shapedrawer_version")

    api("org.tukaani:xz:$tukaani_xz_version")
    api("org.bidib.org.oxbow:swingbits:$swingbits_version")

    // json.org API
    api('org.json:json:20231013')
}

processResources {
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }
    exclude "*.pdn", "*.xcf", "*.ps"

    inputs.property "version", version

    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Quantum Voxel',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: project.version,
                'Main-Class': 'dev.ultreon.quantum.DesktopLauncher',
                'Multi-Release': 'true'
    }

    from {
        compileJava.outputs
    }

    from {
        configurations.shadow.files.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from {
        processResources.outputs
    }

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.register('prepareRun', {
    Files.createDirectories(Paths.get(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.register('copyDependencies', Copy) {
    from(configurations.runtimeClasspath)
    into("$projectDir/build/jars")
}

tasks.register('copyJar', Copy) {
    from(tasks.jar)
    into("$projectDir/build/jars")
}

publishing {
    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/59634919/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = gitLabPrivateToken // the variable resides in $GRADLE_USER_HOME/gradle.properties
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

test {
    useJUnitPlatform()
}

compileJava {
    options.encoding = "UTF-8"
}
